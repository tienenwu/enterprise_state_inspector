import 'dart:io';

Future<void> main(List<String> args) async {
  final root = Directory.current.path;
  final versionFile = File('$root/tool/version.txt');
  if (!await versionFile.exists()) {
    stderr.writeln('Missing tool/version.txt');
    exitCode = 1;
    return;
  }

  final rawVersion = (await versionFile.readAsString()).trim();
  if (rawVersion.isEmpty) {
    stderr.writeln('tool/version.txt is empty');
    exitCode = 1;
    return;
  }

  final versionPattern = RegExp(r'^\d+\.\d+\.\d+(?:[-+].+)?$');
  if (!versionPattern.hasMatch(rawVersion)) {
    stderr.writeln('Invalid version string: $rawVersion');
    exitCode = 1;
    return;
  }

  await _updatePubspec(root, rawVersion);
  await _updateReadme(root, rawVersion);
  await _updateExampleLock(root, rawVersion);
  await _writeVersionDart(root, rawVersion);
}

Future<void> _updatePubspec(String root, String version) async {
  final file = File('$root/pubspec.yaml');
  if (!await file.exists()) {
    stderr.writeln('Skipping missing pubspec.yaml');
    return;
  }
  final contents = await file.readAsString();
  final pattern = RegExp(r'^version:\s*.+$', multiLine: true);
  final updated = contents.replaceFirstMapped(
    pattern,
    (_) => 'version: $version',
  );
  if (contents != updated) {
    await file.writeAsString(updated);
  }
}

Future<void> _updateReadme(String root, String version) async {
  final file = File('$root/README.md');
  if (!await file.exists()) {
    stderr.writeln('Skipping missing README.md');
    return;
  }
  final contents = await file.readAsString();
  final updated = contents.replaceAllMapped(
    RegExp(r'(enterprise_state_inspector:\s*\^)([0-9]+\.[0-9]+\.[0-9]+)'),
    (match) => '${match[1]}$version',
  );
  if (contents != updated) {
    await file.writeAsString(updated);
  }
}

Future<void> _updateExampleLock(String root, String version) async {
  final file = File('$root/example/pubspec.lock');
  if (!await file.exists()) {
    stderr.writeln('Skipping missing example/pubspec.lock');
    return;
  }
  final contents = await file.readAsString();
  final pattern = RegExp(
    r'(enterprise_state_inspector:[\s\S]*?version:\s*")([0-9]+\.[0-9]+\.[0-9]+)(")',
  );
  final updated = contents.replaceAllMapped(
    pattern,
    (match) => '${match[1]}$version${match[3]}',
  );
  if (contents != updated) {
    await file.writeAsString(updated);
  }
}

Future<void> _writeVersionDart(String root, String version) async {
  final versionFile = File('$root/lib/src/version.dart');
  final buffer = StringBuffer()
    ..writeln('// Generated by tool/apply_version.dart; do not edit manually.')
    ..writeln("const String packageVersion = '$version';");
  await versionFile.writeAsString(buffer.toString());

  final publicExport = File('$root/lib/version.dart');
  if (!await publicExport.exists()) {
    await publicExport.writeAsString("export 'src/version.dart';\n");
  }
}
